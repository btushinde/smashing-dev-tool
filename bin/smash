#!/usr/bin/env coffee


Liftoff =     require 'liftoff'
argv =        require('minimist')(process.argv.slice 2)
chalk =       require 'chalk'
program =     require 'commander'
winston =     require 'winston'
tildify =     require 'tildify'
notifier =    require 'node-notifier'
exec =        require 'exec'
rest =        require 'restler'
inquire =     require 'inquirer'

do_key = '67f797894ee8624b9dc72b5be7bd44d6639907aa522cb20f2b9a4169dd00a3a6'

GitHubApi = require("node-github")

github = new GitHubApi
  version: "3.0.0"
  # debug: true
  protocol: "https"
  pathPrefix: "/api/v3"
  timeout: 5000

github.authenticate
  type: "oauth"
  key: "87b39d7b6116996a64a2"
  secret: "313b60a654df8a5efcd3449074557c4087dd57db"
  token: "0a95788d83ff7b526d493351a13f22dbd522fd6e"

# github.authenticate({
#     type: "basic",
#     username: "mikedeboertest",
#     password: "test1324"
# });







defaultAssets = require '../config/assets'
assets = []

# winston logger config
winston.cli()
logger = new (winston.Logger)(
  transports: [new (winston.transports.Console)(colorize: true)]
  levels:
    silly: 0
    verbose: 1
    info: 2
    data: 3
    warn: 4
    debug: 5
    error: 6
  colors:
    silly: 'magenta'
    verbose: 'cyan'
    info: 'green'
    data: 'grey'
    warn: 'yellow'
    debug: 'blue'
    error: 'red'
)

# configure notifications
n = new notifier()
notify = (title, message, type) ->
  msg =
    title: title
    message: message
    group: type
  n.notify msg
  logger.info msg.message



# execute cli commands
execute = exports.execute = (command, cb)->
  exec command, (err, stdout, stderr) ->
    console.log stdout
    cb err
# commander.js config
program
  .version('0.0.1')
  .option('-v, --verbose',         'Display detailed log information')
  .option('-s, --silent',          'Hide all logs and notifications')
  # .on '--help', ->
  #   console.log '  Examples:'
  #   console.log ''
  #   console.log '    $ custom-help --help'
  #   console.log '    $ custom-help -h'
  #   console.log ''

program
  .command('apps')
  .description('deploy application to specified remote enviornment')
  .option('-b, --bold',         'Display detailed log information')
  .action ->
    switch argv._[argv._.length-1]
      when 'list'
        inquire.prompt(
          [
            {
              type: "list"
              name: "service"
              message: "For which service do you want to list Apps?",
              choices: ["DigitalOcean", "GitHub"]
              filter: (val) -> val.toLowerCase()
            }
          ], (answers) ->
            console.log answers.service
            # ans = JSON.stringify(answers, null, "  ")
            # console.log ans.service
            switch answers.service
              when 'digitalocean'
                logger.info 'getting apps from DigitalOcean'
                rest.get('https://api.digitalocean.com/v2/droplets', accessToken: do_key).on('complete', (result)->
                  logger.info chalk.bgBlue 'listing DigitalOcean apps'
                  for ret in result.droplets
                    console.log ret.name
                )

              when 'github'
                logger.info 'getting apps from GitHub'
                github.repos.getFromOrg
                  type: 'all'
                  org: 'smashingBoxes'
                  (err, res) ->
                    for r in res
                      console.log r.name
        )







program
  .command('setup')
  .description('set up project to use the Smasher')
  .option('-b, --bold',         'Display detailed log information')
  .action(->
    console.log 'setup'
  ).on '--help', ->
    console.log '  Examples:'
    console.log ''
    console.log '    $ deploy exec sequential'
    console.log '    $ deploy exec async'
    console.log ''

program
  .command('run')
  .description('run remote setup commands')
  .option('-b, --bold', 'make it bold!')
  .usage('[options] files...')
  .on('--help', ->
    console.log '  Examples:'
    console.log ''
    console.log '    $ deploy exec sequential'
    console.log '    $ deploy exec async'
    console.log ''
  )
  .action(->
    console.log 'running..'
  )

program.parse process.argv


if argv._.length is 0
  program.help()

# liftoff config
# Smasher = new Liftoff
#   name: 'smash'
#   processTitle: 'smasher'
#   moduleName: 'smasher'
#   configName: 'smashfile'
#   extensions: require('interpret').jsVariants
#
# Smasher.on 'require', (name) ->
#   logger.info 'Requiring external module', chalk.magenta(name)
#
# Smasher.on 'requireFail', (name) ->
#   logger.warn 'Failed to load external module', chalk.magenta(name)
#
# Smasher.launch
#   cwd: argv.cwd
#   configPath: argv.myappfile
#   require: argv.require
#   completion: argv.completion
#   (env)->
#     logger.info 'Working in directory', chalk.magenta chalk.underline tildify env.cwd
#     logger.info 'Using Smashfile', chalk.magenta chalk.underline tildify env.configPath
#
#     if !env.configPath
#       logger.error chalk.red 'No SMASHFILE found'
#       process.exit 1
#
#     process.chdir(env.configBase)
#     smashfile = require env.configPath
#
#     # collect asset definitions
#     for asset in smashfile.assets
#       # load preconfigured assets by name
#       if typeof asset is 'string'
#         if defaultAssets[asset]?
#           assets[asset] = defaultAssets[asset]
#         else
#           console.log chalk.red "Asset type: \"#{asset}\" not recognized. Please provide a definition."
#
#       # use an asset definition object specified in Smashfile
#       else
#         assets[asset.ext] = asset


# console.log('YOUR LOCAL MODULE IS LOCATED:', env.modulePath)
# console.log('LOCAL PACKAGE.JSON:', env.modulePackage)
# console.log('CLI PACKAGE.JSON', require('./package'))

# if !env.modulePath
#   console.log(
#     chalk.red('Local gulp not found in'),
#     # chalk.magenta(tildify(env.cwd))
#   )
#   console.log chalk.red('Try running: npm install gulp')
#   process.exit 1
