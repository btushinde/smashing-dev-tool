#!/usr/bin/env coffee
require('pretty-error').start()
_            = require 'lodash'
argv         = require('minimist')(process.argv.slice 2)
chalk        = require 'chalk'
broadway     = require 'broadway'
Commander    = require 'commander'
Orchestrator = require 'orchestrator'
Cation       = require 'cation'
EventEmitter = require 'eventemitter3'
pkg          = require '../package'
Module       = require '../src/core/Module'

log = null

class Smasher extends Module
  @include EventEmitter
  constructor: (@platform, @user, @util, @project, @helpers, @recipes) ->
    log = @util.logger
    @_tasks = []
    @commands = []

    # register commands and tasks
    require("../src/modules/#{a}")(@) for a in [
      'generate'
      'schema'
      'apps'
      'document'
      'compile'
      'compile-webpack'
      'build'
      'test'
      'serve'
      'clean'
    ]

    # Configure Orchestrator instance
    @orchestrator = orchestrator = new Orchestrator()
    orchestrator.add(task.name, task.deps, task.fn) for task in @_tasks

    # Configure Commander.js instance
    commander = Commander
    # Read CLI config from `package.json`
    commander
      .version     pkg.version
      .description pkg.description
      .usage       pkg.usage
    commander.option(opt.option, opt.description) for opt in pkg.options

    # Register commands with commander.js
    for cmd in @commands
      x = commander.command(cmd.cmd)
      x.alias cmd.alias  if cmd.alias?
      x.description cmd.description
      if cmd.options
        x.option(o.opt, o.description) for o in cmd.options
      x.action(cmd.action)

    # Parse args for Commander.js
    if process.argv.slice(2).length is 0 then commander.help()
    else commander.parse process.argv

  # Register a Task (Orchestrator)
  task: (name, deps, fn) ->
    log.verbose "Registering #{chalk.yellow 'task'} #{chalk.cyan name}"
    if typeof deps is 'function'
      fn = deps
      deps = []
    @_tasks.push
      name: name
      deps: deps
      fn: fn

  startTask: ->
    log.verbose 'Starting task:', arguments
    @orchestrator.start.apply @orchestrator, arguments

  # Register a Command (commander.js)
  command: (command) ->
    log.verbose "Registering #{chalk.yellow 'command'} '#{chalk.cyan command.cmd}'"
    @commands.push command


# New Cation container
Registry = new Cation()
require("../src/core/#{a}")(Registry) for a in [
  'user'
  'platform'
  'project'
  'util'
  'helpers'
  'recipes'
]

Registry.register 'Smasher', Smasher,
  args: [
    '@platform'
    '@user'
    '@util'
    '@project'
    '@helpers'
    '@recipes'
  ]
  singleton: true


Registry.get('Smasher')
  .then (smasher) ->
    console.warn 'smasher done!'
