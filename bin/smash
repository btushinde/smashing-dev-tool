#!/usr/bin/env coffee

argv =          require('minimist')(process.argv.slice 2)
chalk =         require 'chalk'
commander =     require 'commander'
tildify =       require 'tildify'
notifier =      require 'node-notifier'
exec =          require 'exec'
rest =          require 'restler'
inquire =       require 'inquirer'
run =           require 'run-sequence'
gulp =          require 'gulp'
required =      require 'require-dir'


{logger, notify, execute} = require '../config/util'


{assets, tasks, args, dir} = config = require('../config/config')

# API Access
do_key = '67f797894ee8624b9dc72b5be7bd44d6639907aa522cb20f2b9a4169dd00a3a6'
GitHubApi = require("node-github")

github = new GitHubApi
  version: "3.0.0"
  # debug: true
  protocol: "https"
  pathPrefix: "/api/v3"
  timeout: 5000

github.authenticate
  type: "oauth"
  key: "87b39d7b6116996a64a2"
  secret: "313b60a654df8a5efcd3449074557c4087dd57db"
  token: "0a95788d83ff7b526d493351a13f22dbd522fd6e"



###
Configure Gulp pipechain
###






###
Configure Commander.js

###
commander
  .version(config.pkg.version)
  .option('-v, --verbose',         'Display detailed log information')
  .option('-s, --silent',          'Hide all logs and notifications')
  .option('-w, --watch',          'Watch assets for changes')
  # .on '--help', ->
  #   console.log '  Examples:'
  #   console.log ''
  #   console.log '    $ custom-help --help'
  #   console.log '    $ custom-help -h'
  #   console.log ''


tasks.add 'apps:list:github', ->
  logger.info 'getting apps from GitHub'
  github.repos.getFromOrg
    type: 'all'
    org: 'smashingBoxes'
    (err, res) ->
      for r in res
        console.log r.name

tasks.add 'apps:list:digitalocean', ->
  logger.info 'getting apps from DigitalOcean'
  rest
    .get('https://api.digitalocean.com/v2/droplets', accessToken: do_key)
    .on('complete', (result)->
      for ret in result.droplets
        console.log ret.name
    )


# Apps
commander
  .command('apps')
  .description('deploy application to specified remote enviornment')
  .option('-b, --bold',         'Display detailed log information')
  .action ->

    # store task names, remove first member as it is consumed by commander.js
    args = argv._.reverse()
    args.pop()

    switch args.pop()
      when 'list'
        inquire.prompt [
          type: "list"
          name: "service"
          message: "For which service do you want to list Apps?",
          choices: ["DigitalOcean", "GitHub"]
          filter: (val) -> val.toLowerCase()
        ], (answers) ->
          switch answers.service
            when 'digitalocean'
              tasks.start('apps:list:digitalocean')
            when 'github'
              tasks.start('apps:list:github')


# Setup
commander
  .command('setup')
  .description('set up project to use the Smasher')
  .option('-b, --bold',         'Display detailed log information')
  .action(->
    console.log 'setup'
  ).on '--help', ->
    console.log '  Examples:'
    console.log ''
    console.log '    $ deploy exec sequential'
    console.log '    $ deploy exec async'
    console.log ''


# Run
commander
  .command('run')
  .description('run remote setup commands')
  .option('-b, --bold', 'make it bold!')
  .usage('[options] files...')
  .on('--help', ->
    console.log '  Examples:'
    console.log ''
    console.log '    $ deploy exec sequential'
    console.log '    $ deploy exec async'
    console.log ''
  )
  .action(->
    console.log 'running..'
  )



# Compile
required '../phases/compile'
commander
  .command('compile')
  .description('compile local assets based on Smashfile')
  .action ->
    toRun = ("compile:#{ext}" for ext, asset of assets)
    tasks.start toRun


# Build
required '../phases/build'
commander
  .command('build')
  .description('build local assets based on Smashfile')
  .action ->
    tasks.start [
      'build:scripts'
      'build:styles'
      'build:vendor'
      'build:views'
      'build:data'
      'build:images'
    ]


# commander.help()  if argv._.length is 0
commander.parse process.argv
